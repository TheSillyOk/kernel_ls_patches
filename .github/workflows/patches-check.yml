name: Check Patches for Rejects

on:
  workflow_dispatch:
  workflow_call:
  pull_request:
  push:
    paths-ignore:
      - 'README.md'
#  schedule:
#   - cron: "0 */6 * * *"

jobs:
  ksu:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        ksu:
          - name: KSUN
            repo_url: "https://github.com/KernelSU-Next/KernelSU-Next"
            repo_owner: "KernelSU-Next"
            repo: "KernelSU-Next"
            branch: "next"
            patch: "KSUN/KSUN-SUSFS-1.5.12.patch"
          - name: RKSU
            repo_url: "https://github.com/rsuntk/KernelSU"
            repo_owner: "rsuntk"
            repo: "KernelSU"
            branch: "main"
            patch: "RKSU/RKSU-SUSFS-1.5.12.patch"
          - name: SukiSU
            repo_url: "https://github.com/SukiSU-Ultra/SukiSU-Ultra"
            repo_owner: "SukiSU-Ultra"
            repo: "SukiSU-Ultra"
            branch: "nongki"
            patch: "SukiSU/SukiSU-SUSFS-1.5.12.patch"

    steps:
      - name: Patch KernelSU with SUSFS patch
        run: |
          set -e

          git clone --depth=1 "https://github.com/${{ github.repository }}" "patch"

          git clone --depth=1 "https://github.com/TheSillyOk/sh" "sh"
          KSU_V=$(bash sh/get_ksuver.sh "${{ matrix.ksu.repo_owner }}" "${{ matrix.ksu.repo }}" "${{ matrix.ksu.branch }}" || bash sh/extract_ksuver.sh "${{ matrix.ksu.repo_url }}" "kernel/Makefile" "${{ matrix.ksu.branch }}")
          echo "--- Cloning and patching ${{ matrix.ksu.name }} $KSU_V ---"

          git clone --depth=1 "${{ matrix.ksu.repo_url }}" -b ${{ matrix.ksu.branch }} "KSU"
          cd KSU
          patch -p1 -N < "../patch/${{ matrix.ksu.patch }}"


  kernel:
    needs: ksu
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        susfs: [true]
        build:
          - type: KSUN
            ksu: true
            repo: "KernelSU-Next/KernelSU-Next"
            branch: "next"
            ksu_patches: "KSUN/WildJames-Manager.patch"
            kernel_patches: "manual_hooks-v1.5.patch seccomp.patch"
            manual_hook_config: "KSU_KPROBES_HOOK=n"
            susfs_patch: "KSUN/KSUN-SUSFS-1.5.12.patch"
          - type: RKSU
            ksu: true
            repo: "rsuntk/KernelSU"
            branch: "main"
            kernel_patches: "get_cred_rcu.patch strncpy_from_user_nofault.patch manual_hooks.patch"
            manual_hook_config: "KSU_MANUAL_HOOK=y"
            susfs_patch: "RKSU/RKSU-SUSFS-1.5.12.patch"
          - type: SukiSU
            ksu: true
            repo: "SukiSU-Ultra/SukiSU-Ultra"
            branch: "nongki"
            kernel_patches: "manual_hooks.patch seccomp.patch"
            manual_hook_config: "CONFIG_KPROBES_HOOK=n"
            susfs_patch: "SukiSU/SukiSU-SUSFS-1.5.12.patch"
        kernel_config:
          - kernel_name: "SM6125"
            tag: SM6125
            kernel_url: "https://github.com/LineageOS/android_kernel_xiaomi_sm6125"
            kernel_branch: "lineage-23.0"
            defconfig: "vendor/trinket-perf_defconfig"
            config: "vendor/xiaomi-trinket.config vendor/laurel_sprout.config"
            patches_folder: "sm6125"
    permissions:
      contents: write

    steps:
      - name: Set Environment Variables
        id: vars
        run: |
          echo "defconfig=${{ matrix.kernel_config.defconfig || 'vendor/laurel_sprout-perf_defconfig' }}" >> $GITHUB_ENV
          echo "config=${{ matrix.kernel_config.config }}" >> $GITHUB_ENV
          echo "patches_url=${{ matrix.kernel_config.patches_url || 'https://github.com/TheSillyOk/kernel_ls_patches' }}" >> $GITHUB_ENV
          echo "patches_branch_arg=${{ matrix.kernel_config.patches_branch && format('-b {0}', matrix.kernel_config.patches_branch) || '' }}" >> $GITHUB_ENV
          echo "patches_folder=${{ matrix.kernel_config.patches_folder || 'noname' }}" >> $GITHUB_ENV
          echo "kernel_branch_arg=${{ matrix.kernel_config.kernel_branch && format('-b {0}', matrix.kernel_config.kernel_branch) || '' }}" >> $GITHUB_ENV
          echo "susfs_branch=${{ matrix.kernel_config.susfs_branch || 'kernel-4.14' }}" >> $GITHUB_ENV
          echo "device=${{ matrix.kernel_config.device || 'MiA3' }}" >> $GITHUB_ENV
          echo "python3=${{ matrix.kernel_config.python3_patch || 'false' }}" >> $GITHUB_ENV

      - name: Initialize Workspace and Install Tools
        run: |
          echo "workspace_folder=${GITHUB_WORKSPACE}/workspace" >> $GITHUB_ENV
          mkdir -p "${GITHUB_WORKSPACE}/workspace"
          sudo apt-get update -qq
          sudo apt-get install -y --no-install-recommends python3-pip git zip unzip gcc g++ make ninja-build file bc bison flex libfl-dev libssl-dev libelf-dev wget build-essential python3-dev python3-setuptools rsync ccache llvm-dev libncurses6 libfdt-dev
          sudo curl -L https://raw.githubusercontent.com/kadwanev/retry/master/retry -o /usr/local/bin/retry && sudo chmod +x /usr/local/bin/retry

      - name: Cache Clang
        uses: actions/cache@v4
        id: cache-clang
        with:
          path: ${{ env.workspace_folder }}/clang
          key: clang-r547379-ubuntu-latest

      - name: Download and Extract Clang
        if: steps.cache-clang.outputs.cache-hit != 'true'
        working-directory: ${{ env.workspace_folder }}
        run: |
          retry -t 3 -s 5 "wget https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/main/clang-r547379.tar.gz -O clang.tar.gz"
          mkdir -p clang && tar -xf clang.tar.gz -C clang

      - name: Set up ccache
        run: |
          ccache --max-size=2G
          ccache --set-config=compression=true
          echo "CCACHE_DIR=$HOME/.ccache" >> $GITHUB_ENV

      - name: Cache Kernel Build
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ${{ env.device }}-${{ matrix.build.type }}-${{ matrix.kernel_config.tag }}-SUSFS_${{ matrix.susfs }}-ccache-${{ github.sha }}-${{ github.run_number }}
          restore-keys: |
            ${{ env.device }}-${{ matrix.build.type }}-${{ matrix.kernel_config.tag }}-SUSFS_${{ matrix.susfs }}-ccache-${{ github.sha }}
            ${{ env.device }}-${{ matrix.build.type }}-${{ matrix.kernel_config.tag }}-SUSFS_${{ matrix.susfs }}-ccache-

      - name: Prepare Kernel Source
        run: |
          set -e
          echo "kernel_folder=${{ env.workspace_folder }}/kernel_tree" >> $GITHUB_ENV
          git clone --depth=1 "${{ matrix.kernel_config.kernel_url }}" ${{ env.kernel_branch_arg }} "${{ env.workspace_folder }}/kernel_tree"
          
          echo "patches_dir=${{ env.workspace_folder }}/kernel_patches" >> $GITHUB_ENV
          git clone --depth=1 "${{ env.patches_url }}" ${{ env.patches_branch_arg }} "${{ env.workspace_folder }}/kernel_patches"

          cd "${{ env.workspace_folder }}/kernel_tree"

          if ${{ env.python3 }}; then
            patch -p1 < "${{ env.workspace_folder }}/kernel_patches/python3.patch" || true
          fi
          
          for patch_name in fix_lto ptrace_fix; do
            patch -p1 < "${{ env.workspace_folder }}/kernel_patches/${patch_name}.patch" || true
          done

          sed -i 's/-dirty//' ./scripts/setlocalversion
          sed -i -E 's/^(CONFIG_LOCALVERSION=.*)/\1-Ok/gi' "arch/arm64/configs/${{ env.defconfig }}"
          echo -e "\n\n# Workflow added configs #\nCONFIG_MODVERSIONS=n" >> "arch/arm64/configs/${{ env.defconfig }}"

      - name: Apply KernelSU / Forks
        if: matrix.build.ksu
        working-directory: ${{ env.kernel_folder }}
        run: |
          set -e
          curl -LSs "https://raw.githubusercontent.com/${{ matrix.build.repo }}/${{ matrix.build.branch }}/kernel/setup.sh" | bash -s ${{ matrix.build.branch }}

          if [[ -n "${{ matrix.build.kernel_patches }}" ]]; then
            for patch_name in ${{ matrix.build.kernel_patches }}; do
              patch -p1 -N < "${{ env.patches_dir }}/${patch_name}"
            done
          fi
          
          if [[ -n "${{ matrix.build.ksu_patches }}" ]]; then
            cd KernelSU*
            for patch_name in ${{ matrix.build.ksu_patches }}; do
              patch -p1 -N < "${{ env.patches_dir }}/${patch_name}"
            done
          fi

          cd ${{ env.kernel_folder }}
          sed -i -E 's/^CONFIG_(KPROBES|TMPFS_XATTR|KSU[^=]*)=(y|n)/# CONFIG_\1=\2/g' "arch/arm64/configs/${{ env.defconfig }}"
          echo -e "\nCONFIG_KPROBES=n\nCONFIG_KSU=y\nCONFIG_TMPFS_XATTR=y" >> "arch/arm64/configs/${{ env.defconfig }}"
          echo "${{ matrix.build.manual_hook_config }}" >> "arch/arm64/configs/${{ env.defconfig }}"

      - name: Apply SUSFS
        if: matrix.susfs
        working-directory: ${{ env.kernel_folder }}
        run: |
          set -e
          SUSFS_FOLDER="${{ env.workspace_folder }}/susfs4ksu"
          git clone --depth=1 https://gitlab.com/simonpunk/susfs4ksu.git -b "${{ env.susfs_branch }}" "$SUSFS_FOLDER"

          case "${{ matrix.build.type }}" in
            KSU)
              patch -p1 -N < "$SUSFS_FOLDER/kernel_patches/50_add_susfs_in_${{ env.susfs_branch }}.patch" || true
              patch -p1 -N < "${{ env.patches_dir }}/${{ env.patches_folder }}/fix_susfs_rejects.patch" || true
              cp -r $SUSFS_FOLDER/kernel_patches/fs/* fs/
              cp -r $SUSFS_FOLDER/kernel_patches/include/linux/* include/linux
              cd KernelSU
              patch -p1 -N < "$SUSFS_FOLDER/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch"
              ;;
            *)
              patch -p1 -F 3 -N < "${{ env.patches_dir }}/susfs-1.5.12.patch" || true
              cd KernelSU*
              patch -p1 -N < "${{ env.patches_dir }}/${{ matrix.build.susfs_patch }}"
              ;;
          esac

      - name: Build Kernel
        working-directory: ${{ env.kernel_folder }}
        run: |
          set -e

          EXTRA_FOLDER="${{ env.kernel_folder }}/extra"
          git clone --depth=1 https://github.com/TheSillyOk/kernel_extra -b main "$EXTRA_FOLDER"

          export CCACHE_EXEC=$(which ccache)
          export ARCH=arm64
          export SUBARCH=arm64
          export KBUILD_BUILD_USER="Ok"
          export KBUILD_BUILD_HOST="Github"
          export PATH="${{ env.workspace_folder }}/clang/bin:$PATH"
          
          mkdir -p "out/arch/arm64/boot/dts/xiaomi/.ginkgo-trinket-overlay.dtbo.qcom-base"
          
          make O=out ARCH=arm64 ${{ env.defconfig }} ${{ env.config }}
          make O=out DTC_PREBUILT=true DTC=$EXTRA_FOLDER/dtc DTC_OVERLAY_TEST_EXT=$EXTRA_FOLDER/ufdt_apply_overlay MKDTIMG=$EXTRA_FOLDER/mkdtimg CC="ccache clang" LD=ld.lld LLVM=1 LLVM_IAS=1 -j"$(nproc --all)" CROSS_COMPILE=aarch64-linux-gnu-
